// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.28.3
// source: products/v1/products.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductsCreateProduct = "/products.v1.Products/CreateProduct"
const OperationProductsDeleteProduct = "/products.v1.Products/DeleteProduct"
const OperationProductsGetProduct = "/products.v1.Products/GetProduct"
const OperationProductsListProducts = "/products.v1.Products/ListProducts"
const OperationProductsSearchProducts = "/products.v1.Products/SearchProducts"
const OperationProductsUpdateProduct = "/products.v1.Products/UpdateProduct"

type ProductsHTTPServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	SearchProducts(context.Context, *SearchProductsRequest) (*SearchProductsResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
}

func RegisterProductsHTTPServer(s *http.Server, srv ProductsHTTPServer) {
	r := s.Route("/")
	r.POST("/products", _Products_CreateProduct0_HTTP_Handler(srv))
	r.GET("/products/{id}", _Products_GetProduct0_HTTP_Handler(srv))
	r.GET("/products", _Products_ListProducts0_HTTP_Handler(srv))
	r.PATCH("/products/{id}", _Products_UpdateProduct0_HTTP_Handler(srv))
	r.DELETE("/products/{id}", _Products_DeleteProduct0_HTTP_Handler(srv))
	r.GET("/products/search", _Products_SearchProducts0_HTTP_Handler(srv))
}

func _Products_CreateProduct0_HTTP_Handler(srv ProductsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProductRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductsCreateProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProduct(ctx, req.(*CreateProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateProductResponse)
		return ctx.Result(200, reply)
	}
}

func _Products_GetProduct0_HTTP_Handler(srv ProductsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductsGetProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProduct(ctx, req.(*GetProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProductResponse)
		return ctx.Result(200, reply)
	}
}

func _Products_ListProducts0_HTTP_Handler(srv ProductsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductsListProducts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProducts(ctx, req.(*ListProductsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProductsResponse)
		return ctx.Result(200, reply)
	}
}

func _Products_UpdateProduct0_HTTP_Handler(srv ProductsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProductRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductsUpdateProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProduct(ctx, req.(*UpdateProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProductResponse)
		return ctx.Result(200, reply)
	}
}

func _Products_DeleteProduct0_HTTP_Handler(srv ProductsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProductRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductsDeleteProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProduct(ctx, req.(*DeleteProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteProductResponse)
		return ctx.Result(200, reply)
	}
}

func _Products_SearchProducts0_HTTP_Handler(srv ProductsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchProductsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductsSearchProducts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchProducts(ctx, req.(*SearchProductsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchProductsResponse)
		return ctx.Result(200, reply)
	}
}

type ProductsHTTPClient interface {
	CreateProduct(ctx context.Context, req *CreateProductRequest, opts ...http.CallOption) (rsp *CreateProductResponse, err error)
	DeleteProduct(ctx context.Context, req *DeleteProductRequest, opts ...http.CallOption) (rsp *DeleteProductResponse, err error)
	GetProduct(ctx context.Context, req *GetProductRequest, opts ...http.CallOption) (rsp *GetProductResponse, err error)
	ListProducts(ctx context.Context, req *ListProductsRequest, opts ...http.CallOption) (rsp *ListProductsResponse, err error)
	SearchProducts(ctx context.Context, req *SearchProductsRequest, opts ...http.CallOption) (rsp *SearchProductsResponse, err error)
	UpdateProduct(ctx context.Context, req *UpdateProductRequest, opts ...http.CallOption) (rsp *UpdateProductResponse, err error)
}

type ProductsHTTPClientImpl struct {
	cc *http.Client
}

func NewProductsHTTPClient(client *http.Client) ProductsHTTPClient {
	return &ProductsHTTPClientImpl{client}
}

func (c *ProductsHTTPClientImpl) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...http.CallOption) (*CreateProductResponse, error) {
	var out CreateProductResponse
	pattern := "/products"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductsCreateProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductsHTTPClientImpl) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...http.CallOption) (*DeleteProductResponse, error) {
	var out DeleteProductResponse
	pattern := "/products/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductsDeleteProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductsHTTPClientImpl) GetProduct(ctx context.Context, in *GetProductRequest, opts ...http.CallOption) (*GetProductResponse, error) {
	var out GetProductResponse
	pattern := "/products/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductsGetProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductsHTTPClientImpl) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...http.CallOption) (*ListProductsResponse, error) {
	var out ListProductsResponse
	pattern := "/products"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductsListProducts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductsHTTPClientImpl) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...http.CallOption) (*SearchProductsResponse, error) {
	var out SearchProductsResponse
	pattern := "/products/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductsSearchProducts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductsHTTPClientImpl) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...http.CallOption) (*UpdateProductResponse, error) {
	var out UpdateProductResponse
	pattern := "/products/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductsUpdateProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
